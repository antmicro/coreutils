name: build coreutils

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'
  pull_request:
  workflow_call:

jobs:
  build-library:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libclang-dev clang cmake wget ninja-build
          wget -q https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-16/wasi-sdk-16.0-linux.tar.gz
          wget -q https://raw.githubusercontent.com/antmicro/wasi_ext_lib/main/canonicalize.patch
          tar xvf wasi-sdk-16.0-linux.tar.gz
          echo "WASI_SDK_PATH=$(pwd)/wasi-sdk-16.0" >> "$GITHUB_ENV"
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y > /dev/null 2> /dev/null
          source $HOME/.cargo/env
          rustup target add wasm32-wasi
      - name: Setup Rust toolchain
        run: |
          dir=$(pwd)
          cd /opt
          git clone https://github.com/rust-lang/rust.git -b beta
          cd rust
          git apply "$dir/canonicalize.patch"
          mkdir tmp
          cd tmp
          sudo ../src/ci/docker/host-x86_64/dist-various-2/build-wasi-toolchain.sh
          cd ..
          ./configure --target=wasm32-wasi --disable-docs --set target.wasm32-wasi.wasi-root=/wasm32-wasi --enable-lld --tools=cargo
          ./x.py build --target x86_64-unknown-linux-gnu,wasm32-wasi --stage 2
          source $HOME/.cargo/env
          rustup toolchain link stage2 "$(pwd)/build/x86_64-unknown-linux-gnu/stage2"
          cargo --version
      - name: Build
        run: |
          source $HOME/.cargo/env
          export CC="${WASI_SDK_PATH}/bin/clang --sysroot=${WASI_SDK_PATH}/share/wasi-sysroot"
          cargo +stage2 build --target wasm32-wasi --release
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: coreutils
          path: ./target/wasm32-wasi/release/coreutils.wasm
